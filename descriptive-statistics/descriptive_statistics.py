# -*- coding: utf-8 -*-
"""descriptive_statistics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LjNQmio1bNDr9xfb-_AkYr-ndbaKW3vH

#Descriptive Statistics for Data-driven Decision Making with Python

This Jupyter notebook accompanies our book on descriptive statistics.

* Support us by buying our book: https://news.towardsai.net/descriptive-statistics
* Github repository: https://github.com/towardsai/tutorials/tree/master/descriptive-statistics
"""

#Calculating the Mean (Page 33):

#Import required libraries:
from statistics import mean

#Data:
X = [5,8,15,18,25]

#Finding mean:
print("Mean = ",mean(X))

#Calculating the Weighted Mean (Page 34):

#Import required libraries:
import  numpy as np

#Data:
X = [5,10,15,20,25]

#Weight:
Y = [1,2,2,1,1]

#Finding weighted mean:
print("Weighted Mean = ",np.average(X,weights=Y))

#Calculating the Geometric Mean (Page 36):

#Import required libraries:
from scipy import stats

#Data:
X = [20,30,40]

#Finding Geometric Mean:
print("Geometric Mean =",stats.gmean(X))

#Calculating the Harmonic Mean (Page 37):

#Import required libraries:
from statistics import harmonic_mean

#Data:
X = [20,30,15]

#Finding harmonic mean:
print("Harmonic Mean =",harmonic_mean([20,30,15]))

#Median (Page 39):
#Odd number of observations:

#Import required libraries:
from statistics import median

#Data:
X =[3,4,11,56,93]

#Finding median:
print("Median =",median(X))

#Median (Page 40):
#Even number of observations:

#Import required libraries:
from statistics import median

#Data:
X = [3,4,11,56,93,100]

#Finding median:
print("Median =",median(X))

#Mode (Page 43):

#Import required libraries:
from statistics import mode

#Data:
X = [2,7,18,32,32,45,78]

#We have to use try-except in case there is no mode or more than one modes:
try:
    print("Mode =",mode(X))
except:
    print("Mode not found!")

#Mode (Page 44):

#Import required libraries:
from statistics import mode

#Data:
X = [2,7,18,32,46,54]

#We have to use try-except in case there is no mode or more than one modes:
try:
    print("Mode =",mode(X))
except:
    print("Mode not found!")
    
#An error is thrown when there are no mode.

#Mode (Page 45):

#Import required libraries:
from statistics import mode

#Data:
X = [2,7,18,18,34,57,57,89]

#We have to use try-except in case there is no mode or more than one modes:
try:
    print("Mode =",mode(X))
except:
    print("Mode not found!")
      
#An error is thrown in there are more than one mode.

#Quantiles (Page 52):
#Odd number of observations:

#Import required libraries:
import numpy as np
X = [2,3,7,11,29,56,57,78,82,89,95]

#Print the values:
print("Min =",np.quantile(X,0))
print("Q1 =",np.quantile(X,0.25))
print("Q2 =",np.quantile(X,0.50))
print("Q3 =",np.quantile(X,0.75))
print("Max =",np.quantile(X,1))

#Quantiles (Page 52):
#Even number of observations:

#Import required libraries:
import numpy as np
X = [2,3,7,11,29,56,57,78,82,89]

#Print the values:
print("Min =",np.quantile(X,0))
print("Q1 =",np.quantile(X,0.25))
print("Q2 =",np.quantile(X,0.50))
print("Q3 =",np.quantile(X,0.75))
print("Max =",np.quantile(X,1))

#Import required libraries (Page 55):
from scipy import stats

#Data:
X= [1,2,3,4,5,6,7,8,9,10]

#Find the percentile rank:
print("Percentile Rank for 7 =",stats.percentileofscore(X,7,kind="strict"))
print("Percentile Rank for 9 =",stats.percentileofscore(X,9,kind="strict"))

#Import required libraries (Page 55):
from scipy import stats

#Data:
X= [1,2,2,3,4,5,5,6,7,8]

#Find the percentile rank:
print("Percentile Rank for 5 =",stats.percentileofscore(X,5,kind="strict"))

#Percentile values (Page 57):

#Import required libraries:
import numpy as np

#Data:
X = [2,5,6,8,11,45,64,71,77,89,93]

#Print the values:
print("75th =",np.percentile(X,75))
print("70th =",np.percentile(X,70))
print("40th =",np.percentile(X,40))

#Percentile values (Page 59):

#Import required libraries:
import numpy as np

#Data:
X = [2,5,6,8,11,45,64,71,77,89,93]

#Print the values:
print("10th =",np.percentile(X,10))
print("25th =",np.percentile(X,25))
print("75th =",np.percentile(X,75))

#Range (Page 61):

#Data:
X = [2,5,6,8,11,15,19,21,25,28,31]

#Print values:
print("Range =",(max(X)-min(X)))

#Inter Quartile Range(IQR) (Page 62): 

#Import required libraries:
from scipy import stats

#Data:
X = [2,5,6,8,11,15,19,21,25,28,31]

#Interquartile Range:
print("Interquartile Range =",stats.iqr(X,interpolation="nearest"))

#Inter Quartile Range(IQR) (Page 64):

#Import required libraries:
from scipy import stats

#Data:
X = [2,5,6,8,11,15,19,21,25,28,500]

#Range:
print("Range =",(max(X)-min(X)))

#Interquartile Range:
print("Interquartile Range =",stats.iqr(X,interpolation="nearest"))

#Sample variance (Page 68):

#Import required libraries:
from statistics import variance

#Data:
X = [20,30,25,50,70,45,75]

#Print variance:
print("Variance =",variance(X))

#Sample Standard Deviation (Page 68):

#Import required libraries:
from statistics import stdev

#Data:
X = [20,30,25,50,70,45,75]

#Print Standard Deviation:
print("Standard Deviation =",stdev(X))

#Population variance:

#Import required libraries:
from statistics import pvariance

#Data:
X = [20,30,25,50,70,45,75]

#Print variance:
print("Variance =",pvariance(X))

#Population Standard Deviation (Page 68):

#Import required libraries:
from statistics import pstdev

#Data:
X = [20,30,25,50,70,45,75]

#Print Standard Deviation:
print("Standard Deviation =",pstdev(X))

#Mean Absolute Deviation (Page 74):

#Import required libraries:
from numpy import mean, absolute

#Data:
X = [18,20,34]

#Print Mean Absolute Deviation:
print("Mean Absolute Deviation = ",mean(absolute(X - mean(X))) )

#Coefficient of variation (Page 78):

#Import required libraries:
from statistics import mean,stdev

#Data:
X = [51710,51350,51400,51450,51460]
Y = [62.009,61.962,62.797,61.996,63.158]

#Standard Deviation:
std_X = stdev(X)
std_Y = stdev(Y)

#Mean:
mean_X = mean(X)
mean_Y = mean(Y)

#Print coefficient of varition:
print("Coefficient of variation for X =",std_X/mean_X)
print("Coefficient of variation for Y =",std_Y/mean_Y)

#Skewness for normally distributed data (Page 86):

#Import required libraries:
from statistics import mean,median,mode
from scipy.stats import skew
import numpy as np

#Get normally distributed data:
X = np.random.normal(0,2,10000)

#Print the data:
print(X,"\n")

#Print Mean:
print("Mean =",mean(X))

#Print Median:
print("Median = ",median(X))

#Print Mode if available:
try:
    print("Mode = ",mode(X))
except:
    print("Mode not found!")
    
#Find the skewness:
print("Skewness =",skew(X))

#Skewness for normally distributed data (Page 87):

#Import required libraries:
from statistics import mean,median,mode
from scipy.stats import skew
import numpy as np


#Get normally distributed data:
X = [1,2,3,4,5]

#Print the data:
print(X,"\n")

#Print Mean:
print("Mean =",mean(X))

#Print Median:
print("Median = ",median(X))

#Print Mode if available:
try:
    print("Mode = ",mode(X))
except:
    print("Mode not found!")
    
#Find the skewness:
print("Skewness =",skew(X))

#Moderately Positive Skewed Data (Page 88):

#Import required libraries:
from statistics import mean,median,mode
from scipy.stats import skew
import numpy as np


#Get normally distributed data:
X = [1,1,1,2,3,4,5]

#Print the data:
print(X,"\n")

#Print Mean:
print("Mean =",mean(X))

#Print Median:
print("Median = ",median(X))

#Print Mode if available:
try:
    print("Mode = ",mode(X))
except:
    print("Mode not found!")
    
#Find the skewness:
print("Skewness =",skew(X))

#Moderately Negative Skewed Data (Page 89):

#Import required libraries:
from statistics import mean,median,mode
from scipy.stats import skew
import numpy as np


#Get normally distributed data:
X = [1,2,3,4,5,5,5]

#Print the data:
print(X,"\n")

#Print Mean:
print("Mean =",mean(X))

#Print Median:
print("Median = ",median(X))

#Print Mode if available:
try:
    print("Mode = ",mode(X))
except:
    print("Mode not found!")
    
#Find the skewness:
print("Skewness =",skew(X))

#Highly Positive Skewed Data (Page 90):

#Import required libraries:
from statistics import mean,median,mode
from scipy.stats import skew
import numpy as np


#Get normally distributed data:
X = [1,1,1,1,1,1,1,1,1,2,3,4,5]

#Print the data:
print(X,"\n")

#Print Mean:
print("Mean =",mean(X))

#Print Median:
print("Median = ",median(X))

#Print Mode if available:
try:
    print("Mode = ",mode(X))
except:
    print("Mode not found!")
    
#Find the skewness:
print("Skewness =",skew(X))

#Highly Negative Skewed Data (Page 91):

#Import required libraries:
from statistics import mean,median,mode
from scipy.stats import skew
import numpy as np


#Get normally distributed data:
X = [1,2,3,4,5,5,5,5,5,5,5,5,5]

#Print the data:
print(X,"\n")

#Print Mean:
print("Mean =",mean(X))

#Print Median:
print("Median = ",median(X))

#Print Mode if available:
try:
    print("Mode = ",mode(X))
except:
    print("Mode not found!")
    
#Find the skewness:
print("Skewness =",skew(X))

#Mesokurtic (Page 95):
#Fisher=False

#Import required libraries:
from scipy.stats import kurtosis
import numpy as np

#Generating normally distributed data:
X=np.random.normal(0,1,100000)

#Get the kurtosis value:
print("Kurtosis = ",kurtosis(X,fisher=False))

#Mesokurtic (Page 95):
#Fisher=True

#Import required libraries:
from scipy.stats import kurtosis
import numpy as np

#Generating normally distributed data:
X=np.random.normal(0,1,100000)

#Get the kurtosis value:
print("Kurtosis = ",kurtosis(X,fisher=True))

#Leptokurtic (Page 95):
#Fisher=False

#Import required libraries:
from scipy.stats import kurtosis
import numpy as np

#Generating normally distributed data:
X = [1,2,3,4,4,4,5,5,5,5,5,5,5,5,5]

#Get the kurtosis value:
print("Kurtosis = ",kurtosis(X,fisher=False))

#Leptokurtic (Page 96):
#Fisher=True

#Import required libraries:
from scipy.stats import kurtosis
import numpy as np

#Generating normally distributed data:
X = [1,2,3,4,4,4,5,5,5,5,5,5,5,5,5]

#Get the kurtosis value:
print("Kurtosis = ",kurtosis(X,fisher=True))

#Platykurtic (Page 96):
#Fisher=False

#Import required libraries:
from scipy.stats import kurtosis
import numpy as np

#Generating normally distributed data:
X = [1,2,3,4,5,6]

#Get the kurtosis value:
print("Kurtosis = ",kurtosis(X,fisher=False))

#Platykurtic (Page 96):
#Fisher=True

#Import required libraries:
from scipy.stats import kurtosis
import numpy as np

#Generating normally distributed data:
X = [1,2,3,4,5,6]

#Get the kurtosis value:
print("Kurtosis = ",kurtosis(X,fisher=True))

#Covarience (Page 103):

#Import required libraries:
import numpy as np

#Data:
X = [100,103,110,115,119]
Y = [1,7,15,20,22]

#Print the covarience matrix:
print("Covariance\n")
print(np.cov(X,Y))

#Correlation (Page 104):

#Import required libraries:
import numpy as np

#Data:
X = [100,103,110,115,119]
Y = [1,7,15,20,22]

#Print the correlation matrix:
print("Correlation\n")
print(np.corrcoef(X,Y))

#1-Dimensional Data (Page 119):

#Import required libraries:
from scipy import stats

#Dataset:
d = [1,2,3,4,5]

#Finding 0th moment:
print("0th Moment = ",stats.moment(d,moment=0))

#Finding 1st moment:
print("1st Moment = ",stats.moment(d,moment=1))

#Finding 2nd moment:
print("2nd Moment = ",stats.moment(d,moment=2))

#Finding 3nd moment:
print("3nd Moment = ",stats.moment(d,moment=3))

#Finding 4th moment:
print("4th Moment = ",stats.moment(d,moment=4))

#2-Dimensional Data (Page 119):

#Import required libraries:
from scipy import stats

#Dataset:
d = [[5,6,9,11,3],[21,4,8,15,2]]

#Finding 0th moment:
print("0th Moment = ",stats.moment(d,moment=0))

#Finding 1st moment:
print("1st Moment = ",stats.moment(d,moment=1))

#Finding 2nd moment:
print("2nd Moment = ",stats.moment(d,moment=2))

#Finding 3nd moment:
print("3nd Moment = ",stats.moment(d,moment=3))

#Finding 4th moment:
print("4th Moment = ",stats.moment(d,moment=4))

#2-Dimensional Data (Page 120):
#Set axis=1 (Horizonatal):

#Import required libraries:
from scipy import stats

#Dataset:
d = [[5,6,9,11,3],[21,4,8,15,2]]

#Finding 0th moment:
print("0th Moment = ",stats.moment(d,moment=0,axis=1))

#Finding 1st moment:
print("1st Moment = ",stats.moment(d,moment=1,axis=1))

#Finding 2nd moment:
print("2nd Moment = ",stats.moment(d,moment=2,axis=1))

#Finding 3nd moment:
print("3nd Moment = ",stats.moment(d,moment=3,axis=1))

#Finding 4th moment:
print("4th Moment = ",stats.moment(d,moment=4,axis=1))

#Multi-Dimensional Data (Page 120):

#Import required libraries:
from scipy import stats

#Dataset:
d = [[5,6,9,11,3],
     [21,4,8,15,2],
    [15,23,42,1,36]]

#Finding 0th moment:
print("0th Moment = ",stats.moment(d,moment=0))

#Finding 1st moment:
print("1st Moment = ",stats.moment(d,moment=1))

#Finding 2nd moment:
print("2nd Moment = ",stats.moment(d,moment=2))

#Finding 3nd moment:
print("3nd Moment = ",stats.moment(d,moment=3))

#Finding 4th moment:
print("4th Moment = ",stats.moment(d,moment=4))

#2-Dimensional Data (Page 121):
#Set axis=1 (Horizonatal):
#Higher Order Moments:

#Import required libraries:
from scipy import stats

#Dataset:
d = [[5,6,9,11,3],[21,4,8,15,2]]

#Finding 10th moment:
print("10th Moment = ",stats.moment(d,moment=10,axis=1))

#Finding 12th moment:
print("12th Moment = ",stats.moment(d,moment=12,axis=1))

#Sample 1 (Page 131):

#Import required libraries:
from statistics import mean,stdev
from scipy import stats

#Data:
X = [20,30,50,40,60]

#Print Stats:
print("Mean =",mean(X))
print("Standard Deviation =",stdev(X))
print("Standard Error From Mean =",stats.sem(X))

#Sample 2 (Page 131):

#Import required libraries:
from statistics import mean,stdev
from scipy import stats

#Data:
X = [50,60,100,20,10]

#Print Stats:
print("Mean =",mean(X))
print("Standard Deviation =",stdev(X))
print("Standard Error From Mean =",stats.sem(X))

#Sample 3 (Page 132):

#Import required libraries:
from statistics import mean,stdev
from scipy import stats

#Data:
X = [20,30,50,80,10]

#Print Stats:
print("Mean =",mean(X))
print("Standard Deviation =",stdev(X))
print("Standard Error From Mean =",stats.sem(X))

#Confidence level = 68.3% (Page 135):

#Import required libraries:
from scipy import stats
from statistics import mean

#Data:
X = [38,40,48]
confidence_level = 0.683
degree_free = len(X)-1
sample_mean = mean(X)
SEM = stats.sem(X)
confidence_interval = stats.t.interval(confidence_level, degree_free, sample_mean, SEM)

#Print the data:
print("Confidence Interval =",confidence_interval)

#Confidence level = 95% (Page 136):

#Import required libraries:
from scipy import stats
from statistics import mean

#Data:
X = [38,40,48]
confidence_level = 0.95
degree_free = len(X)-1
sample_mean = mean(X)
SEM = stats.sem(X)
confidence_interval = stats.t.interval(confidence_level, degree_free, sample_mean, SEM)

#Print the data:
print("Confidence Interval =",confidence_interval)